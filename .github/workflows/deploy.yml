name: Deploy spring-lotto-api application

on:
  push:
    paths-ignore:
      - "*.md"
      - "**/*.md"
      - ".gitlab-ci.yml"
      - ".gitignore"
      - "renovate.json"
      - "debian/**"
      - "docker/**"
      - "docs/**"
    branches:
      - dev
  workflow_dispatch:
    inputs:
      forced_deploy:
        description: "Manually forced deploy"
        required: false
        default: "false"
        type: choice
        options:
          - "false"
          - "true"

jobs:

  setup:
    name: Init environment variables
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: read
      id-token: write
    outputs:
      app_name:  ${{ steps.env.outputs.APP_NAME }}
      cluster_name: ${{ steps.env.outputs.CLUSTER_NAME }}
      service_name: ${{ steps.env.outputs.APP_NAME }}-ecss
      container_name: ${{ steps.env.outputs.APP_NAME }}-ecsc
      family_name: ${{ steps.env.outputs.APP_NAME }}-td
      stage: ${{ steps.env.outputs.STAGE }}
      version: ${{ steps.env.outputs.VERSION }}
      tag: ${{ steps.env.outputs.IMAGE_TAG }}
      aws_region: ${{ steps.env.outputs.AWS_REGION }}
      role_to_assume: ${{ steps.env.outputs.ROLE_TO_ASSUME }}
      role_session_name: ${{ steps.env.outputs.ROLE_SESSION_NAME }}
      need_to_push_image: ${{ steps.env.outputs.need_to_push_image }}
      need_to_deploy: ${{ steps.env.outputs.need_to_deploy }}

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Load environment variables
        id: env
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          GH_OWNER: ${{ github.repository_owner }}
        run: |
          set -e # exit on error
          ref=${{ github.ref }}
          echo "Target $ref"      
          stage=""
          if [[ $ref == refs/tags/v* ]]; then
            raw=$(git branch -r --contains $ref)
            stage=${raw##*/}
          else
            stage=${{ github.ref_name }}
          fi
          if [[ $stage == "main" ]]; then
            stage="prd"
          fi
          echo "STAGE=${stage}" >> "$GITHUB_OUTPUT"
          version=$(grep -m1 '<version>' pom.xml | sed -E 's|.*<version>(.*)</version>.*|\1|')
          echo "VERSION=${version}" >> $GITHUB_OUTPUT
          tag="${version}-${stage}"
          if [ -z "${stage}" ] || [ "${stage}" = "main" ] || [ "${stage}" = "prd" ] || [ "${stage}" = "dev" ]; then
            tag="${version}"
          fi
          echo "IMAGE_TAG=${tag}" >> $GITHUB_OUTPUT
          ENV_FILE=cicd/${stage}/.env
          echo "Load config file ${ENV_FILE}"
          if [ ! -f "${ENV_FILE}" ]; then
            echo "no env file found: ${ENV_FILE}"
            exit 1
          fi
          while IFS='=' read -r key value; do
            export "$key=$value"
            echo "$key=$value" >> "$GITHUB_OUTPUT"
          done < <(grep -v '^#' "${ENV_FILE}" | grep '=')
          echo "need_to_push_image=true" >> $GITHUB_OUTPUT
          echo "need_to_deploy=false" >> $GITHUB_OUTPUT
          

  build:
    name: Build and Push Image
    needs: setup
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write
      id-token: write
    steps:
      - name: Show all outputs
        id: show-all-outputs
        run: |
          echo "Outputs from setup job (JSON):"
          echo '${{ toJson(needs.setup.outputs) }}'

      - name: Checkout source
        uses: actions/checkout@v4

      - name: Setup QEMU
        uses: docker/setup-qemu-action@v3

      - name: Setup Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Login to GHCR
        id: login-to-ghcr
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Build and push Image
        if: needs.setup.outputs.need_to_push_image == 'true'
        id: build-and-push
        uses: docker/build-push-action@v5
        with:
          context: .
          file: cicd/docker/Dockerfile
          push: true
          platforms: linux/amd64,linux/arm64
          tags: ghcr.io/${{ github.repository }}:${{ needs.setup.outputs.tag }}
          cache-from: type=gha
          cache-to: type=gha,mode=min

  deploy:
    name: Deploy to ECS
    if: needs.setup.outputs.need_to_deploy == 'true'
    needs:
      - setup
      - build
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: read
      id-token: write

    steps:

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        id: aws-sts-token
        with:
          role-to-assume: ${{ needs.setup.outputs.role_to_assume }}
          role-session-name: ${{ needs.setup.outputs.role_session_name }}
          aws-region: ${{ needs.setup.outputs.aws_region }}

      - name: Previous ECS task definition
        id: prev-ecs-task-definition
        env:
          TASK_DEFINITION_FAMILY: ${{ needs.setup.outputs.family_name }}
        run: |
          aws ecs describe-task-definition --task-definition $TASK_DEFINITION_FAMILY --query taskDefinition > task-definition.json

      - name: New ECS task definition
        id: new-task-definition
        uses: aws-actions/amazon-ecs-render-task-definition@v1
        with:
          task-definition: task-definition.json
          container-name: ${{ needs.setup.outputs.container_name }}
          image: ghcr.io/${{ github.repository }}:${{ needs.setup.outputs.tag }}

      - name: Deploy to Amazon ECS service
        id: deploy-to-ecs
        uses: aws-actions/amazon-ecs-deploy-task-definition@v2
        with:
          task-definition: ${{ steps.new-task-definition.outputs.task-definition }}
          service: ${{ needs.setup.outputs.service_name }}
          cluster: ${{ needs.setup.outputs.cluster_name }}
          propagate-tags: SERVICE
          wait-for-service-stability: true
          wait-for-minutes: 8
